name: Build Cross-Platform

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [3.9]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libx11-xcb1 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libxkbcommon-x11-0 \
          libxcb-shape0
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed --icon=PLNet.ico --add-data "res;res" --name PLNet-Windows PLNet.py
        
    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pyinstaller --onefile --windowed --icon=PLNet.ico --add-data "res:res" --name PLNet-macOS PLNet.py
        
    - name: Build with PyInstaller (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --onefile --windowed --icon=PLNet.ico --add-data "res:res" --name PLNet-Linux PLNet.py
        
    - name: Create distribution directory
      run: |
        mkdir -p dist-final
        
    - name: Copy Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        copy dist\PLNet-Windows.exe dist-final\
        
    - name: Copy macOS executable
      if: matrix.os == 'macos-latest'
      run: |
        cp dist/PLNet-macOS dist-final/
        
    - name: Copy Linux executable
      if: matrix.os == 'ubuntu-latest'
      run: |
        cp dist/PLNet-Linux dist-final/
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: PLNet-${{ matrix.os }}
        path: dist-final/
        retention-days: 30

  # 创建Release（仅在推送tag时）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: PLNet ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: PLNet-windows-latest/PLNet-Windows.exe
        asset_name: PLNet-Windows.exe
        asset_content_type: application/octet-stream
        
    - name: Upload macOS Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: PLNet-macos-latest/PLNet-macOS
        asset_name: PLNet-macOS
        asset_content_type: application/octet-stream
        
    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: PLNet-ubuntu-latest/PLNet-Linux
        asset_name: PLNet-Linux
        asset_content_type: application/octet-stream