name: Build Cross-Platform

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    strategy:
      fail-fast: false  # 不要因为一个平台失败就取消其他平台
      matrix:
        include:
          - os: windows-latest
            python-version: '3.9'
            executable-suffix: '.exe'
            separator: ';'
            name-suffix: 'Windows'
          - os: macos-latest
            python-version: '3.9'
            executable-suffix: ''
            separator: ':'
            name-suffix: 'macOS'
          - os: ubuntu-20.04  # 使用稳定的Ubuntu版本
            python-version: '3.9'
            executable-suffix: ''
            separator: ':'
            name-suffix: 'Linux'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5  # 使用最新版本
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4  # 使用最新版本
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pyinstaller
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pyqt5 \
          python3-pyqt5.qtcore \
          python3-pyqt5.qtgui \
          python3-pyqt5.qtwidgets \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libxrender1 \
          libxrandr2 \
          libxss1 \
          libxcursor1 \
          libxcomposite1 \
          libasound2 \
          libxi6 \
          libxtst6 \
          qt5-gtk-platformtheme
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install -r requirements.txt
        
    - name: Test Python and PyQt installation
      run: |
        python --version
        python -c "import PyQt5; print('PyQt5 version:', PyQt5.QtCore.PYQT_VERSION_STR)"
        python -c "import sys; print('Python path:', sys.executable)"
        
    - name: Check project files
      run: |
        ls -la
        echo "Checking PLNet4.py:"
        head -10 PLNet4.py || echo "PLNet4.py not found or unreadable"
        echo "Checking res directory:"
        ls -la res/ || echo "res directory not found"
        echo "Checking PLNet.ico:"
        ls -la PLNet.ico || echo "PLNet.ico not found"
        
    - name: Build with PyInstaller (Debug mode)
      run: |
        pyinstaller --onefile --windowed --clean --debug all \
          --icon=PLNet.ico \
          --add-data "res${{ matrix.separator }}res" \
          --hidden-import PyQt5.sip \
          --hidden-import PyQt5.QtCore \
          --hidden-import PyQt5.QtGui \
          --hidden-import PyQt5.QtWidgets \
          --log-level DEBUG \
          --name PLNet4-${{ matrix.name-suffix }} \
          PLNet4.py
          
    - name: Show build logs on failure
      if: failure()
      run: |
        echo "=== PyInstaller build directory ==="
        ls -la build/ || echo "No build directory"
        echo "=== PyInstaller dist directory ==="
        ls -la dist/ || echo "No dist directory"
        echo "=== PyInstaller warnings file ==="
        cat build/PLNet4-${{ matrix.name-suffix }}/warn-PLNet4-${{ matrix.name-suffix }}.txt || echo "No warnings file"
        echo "=== Last 50 lines of any log files ==="
        find . -name "*.log" -exec echo "File: {}" \; -exec tail -50 {} \; || echo "No log files found"
        
    - name: Verify build output
      run: |
        ls -la dist/
        
    - name: Prepare distribution
      shell: bash
      run: |
        mkdir -p dist-final
        if [ -f "dist/PLNet4-${{ matrix.name-suffix }}${{ matrix.executable-suffix }}" ]; then
          cp "dist/PLNet4-${{ matrix.name-suffix }}${{ matrix.executable-suffix }}" dist-final/
          echo "✅ Build successful for ${{ matrix.name-suffix }}"
        else
          echo "❌ Build failed for ${{ matrix.name-suffix }}"
          exit 1
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4  # 使用最新版本
      with:
        name: PLNet4-${{ matrix.name-suffix }}
        path: dist-final/
        retention-days: 30
        compression-level: 6

  # 创建Release（仅在推送tag时）
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4  # 使用最新版本
      with:
        path: artifacts/
        
    - name: Display downloaded artifacts
      run: |
        find artifacts/ -type f -ls
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2  # 使用现代的release action
      with:
        tag_name: ${{ github.ref_name }}
        name: PLNet4 ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          artifacts/PLNet4-Windows/PLNet4-Windows.exe
          artifacts/PLNet4-macOS/PLNet4-macOS
          artifacts/PLNet4-Linux/PLNet4-Linux
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}